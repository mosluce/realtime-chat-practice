extends layout

block content
    div.container(ng-controller="ChatCtrl", ng-init="init()")
        div.row
            div.col-sm-12
                h2.page-header 無責任聊天室
        //Login Form
        div.row.login-form(ng-show="!loggedIn&&initialized")
            div.col-sm-4.col-sm-push-4
                form(novalidate, name="loginForm", ng-submit="login()")
                    form-validation-label(message="requiredMessage", form="loginForm", field="username")
                    div.form-group.input-group
                        span.input-group-addon 帳號
                        input.form-control(type="username", ng-model="model.username", placeholder="聊天用暱稱", required, name="username")

                    form-validation-label(message="requiredMessage", form="loginForm", field="password")
                    div.form-group.input-group
                        span.input-group-addon 密碼
                        input.form-control(type="password", ng-model="model.password", placeholder="密碼", required, name="password")

                    div.form-group.clearfix
                        button.btn.btn-default.pull-right(type="submit") 登入
        //ChatView
        div.chat-wall(ng-show="loggedIn")
            div.message-pool
                div.page-header
                    div.form-group
                        span.label.label-info 登入名稱: {{currentUsername}}
                    //輸入訊息表單
                    form(novalidate, name="messageForm", ng-submit="to()")
                        form-validation-label(message="requiredMessage", form="messageForm", field="content")
                        div.form-group.input-group
                            span.input-group-addon 輸入訊息
                            input.form-control(type="text", ng-model="messageData.content", required, placeholder="輸入訊息", name="content")
                            span.input-group-btn
                                button.btn.btn-default
                                    i.glyphicon.glyphicon-send

                        div.form-group.input-group
                            span.input-group-addon 密語對象
                            ui-select.form-group(ng-model="messageData.username")
                                ui-select-match(allow-clear="true", placeholder="選擇對話對象") {{$select.selected.username}}
                                ui-select-choices(repeat="user.username as user in users") {{user.username}}
                //訊息列
                div.message-box
                    ul.list-group
                        li.list-group-item(ng-repeat="message in messages track by $index")
                            span.label.label-default {{message.username}}
                            span {{message.content}}
                            span.badge {{message.time | date: 'yyyy/MM/dd HH:mm:ss'}}
            //使用者列表
            div.user-pool
                ul.list-group
                    li.list-group-item 線上使用者
                        span.badge {{users.length}}
                    li.list-group-item(ng-repeat="user in users track by $index")
                        a(href, ng-click="messageData.username=user.username") {{user.username}}

block scripts
    script.
        angular.module('app')
                .directive('formValidationLabel', [function () {
                    return {
                        restrict: 'E',
                        replace: true,
                        template: '<span class="label label-danger" ng-show="(form[field].$touched||form.$submitted)&&form[field].$invalid">{{message}}</span>',
                        scope: {
                            form: '=',
                            field: '@',
                            message: '='
                        }
                    }

                }])
                .controller('ChatCtrl', ['$scope', '$http', 'ngProgressFactory', function ($scope, $http, ngProgressFactory) {
                    var socket = io();

                    $scope.initialized = false;
                    $scope.currentUsername = null;
                    $scope.loggedIn = false;
                    $scope.model = {};
                    $scope.users = [];
                    $scope.messageData = {};
                    $scope.messages = [];
                    $scope.loginForm = null;
                    $scope.messageForm = null;
                    $scope.requiredMessage = "必填";
                    $scope.progress = ngProgressFactory.createInstance();

                    $scope.init = function () {
                        var promise = $http.get('/user/me');

                        promise.then(function (result) {
                            console.log(result);
                            $scope.model = result.data;
                            $scope.join();
                            $scope.currentUsername = $scope.model.username;
                            $scope.loggedIn = true;
                            $scope.initialized = true;
                            $scope.model = {};
                        }, function () {
                            $scope.loggedIn = false;
                            $scope.initialized = true;
                        });
                    };

                    $scope.login = function () {
                        if ($scope.loginForm.$invalid) return;

                        $scope.progress.start();

                        $http.post('/user/login', $scope.model)
                                .then(function () {
                                    $scope.progress.complete();

                                    $scope.loggedIn = true;
                                    $scope.join();
                                    $scope.currentUsername = $scope.model.username;
                                    $scope.model = {};
                                    $scope.loginForm.$setPristine();
                                    $scope.loginForm.$setUntouched();
                                }, function (e) {
                                    $scope.progress.complete();

                                    alert(e.data.message);
                                });
                    };

                    $scope.onlineChange = function () {
                        $http.get('/user/online').then(function (result) {
                            $scope.users = result.data;
                        });
                    };

                    $scope.to = function () {
                        if ($scope.messageForm.$invalid) return;

                        $scope.messageData.time = new Date();

                        socket.emit('message', $scope.messageData);

                        $scope.messages.unshift({
                            username: $scope.currentUsername,
                            content: $scope.messageData.content,
                            time: $scope.messageData.time
                        });

                        $scope.messageData.content = null;

                        $scope.messageForm.$setPristine();
                        $scope.messageForm.$setUntouched();
                    };

                    $scope.join = function () {
                        socket.emit('join', {username: $scope.model.username});
                    };

                    socket.on('connect', function () {
                        console.log('connect');
                    });

                    socket.on('reconnect', function () {
                        console.log('reconnect');
                    });

                    socket.on('disconnect', function () {
                        console.log('disconnect');
                        $scope.$apply(function () {
                            $scope.loggedIn = false;
                        });
                    });

                    socket.on('onlineChange', function () {
                        $scope.$apply(function () {
                            $scope.onlineChange();
                        });
                    });

                    socket.on('accessFailure', function (data) {
                        alert(data.message);
                        $scope.$apply(function () {
                            $scope.loggedIn = false;
                        });
                    });

                    socket.on('message', function (data) {
                        $scope.$apply(function () {
                            $scope.messages.unshift(data);
                        });
                    });

                    socket.on('messageFailure', function (data) {
                        alert(data.message);
                    });

                    socket.on('history', function(messages) {
                        $scope.messages = messages;
                    });

                }]);